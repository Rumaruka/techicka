buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        jcenter()
        mavenCentral()
        maven { url 'https://modmaven.dev/' }
        maven {
            name "Sponge"
            url "https://repo.spongepowered.org/repository/maven-public/"
        }

        mavenLocal()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.0.0'
group = 'com.rumaruka.techicka' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'techicka'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

minecraft {

    mappings channel: 'parchment', version: '2022.03.06-1.16.5'

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                techicka {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                techicka {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'techicka', '--all', '--output', file('src/generated/resources/'), "--existing", "\"" + sourceSets.main.resources.srcDirs[0] + "\""

            mods {
                techicka {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }
repositories {
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        url "https://maven.blamejared.com"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    jcenter()
    mavenCentral()
    mavenLocal()
}
dependencies {

    minecraft 'net.minecraftforge:forge:1.16.5-36.2.30'

    compileOnly  fg.deobf("vazkii.botania:Botania:1.16.5-420.2:api")
    compileOnly   fg.deobf("vazkii.botania:Botania:1.16.5-420.2")
    runtimeOnly   fg.deobf("vazkii.botania:Botania:1.16.5-420.2")

    runtimeOnly fg.deobf("curse.maven:exp-401955:3648653")  // Ars Nouveau 1.24.2
    compileOnly fg.deobf("curse.maven:exp-401955:3648653")

    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.16.5:3.0.65')

    implementation fg.deobf("curse.maven:cofh-core-69162:${cofh_core_file}")
    implementation fg.deobf("curse.maven:thermal-foundation-222880:${thermal_foundation_file}")
    implementation fg.deobf("curse.maven:thermal-expansion-69163:${thermal_expansion_file}")
    implementation fg.deobf("curse.maven:thermal-cultivation-271835:${thermal_cultivation_file}")
    implementation fg.deobf("curse.maven:thermal-locomotion-406959:${thermal_locomotion_file}")
    implementation fg.deobf("curse.maven:thermal-innovation-291737:${thermal_innovation_file}")

    compileOnly "mekanism:Mekanism:${mekanism_version}:api"

    // If you want to test/use Mekanism & its modules during `runClient` invocation, use the following
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}")// core
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:additions")// Mekanism: Additions
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:generators")// Mekanism: Generators
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:tools")// Mekanism: Tools

    runtimeOnly fg.deobf("curse.maven:blood-magic-224791:${blood_magic_file}")
    compileOnly fg.deobf("curse.maven:blood-magic-224791:${blood_magic_file}")

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-48:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-48")

    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.4-4.0.3.5:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.4-4.0.3.5")

    compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:1.16-3.1.3-21:api")
    runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:1.16-3.1.3-21")
    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")





    annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'
}


jar {
    manifest {
        attributes([
            "Specification-Title": "Techicka",
            "Specification-Vendor": "techickasareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"techickasareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
